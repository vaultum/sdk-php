<?php
/**
 * UserOperation
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  VaultumSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Vaultum API
 *
 * Backend API for Vaultum smart wallet operations
 *
 * The version of the OpenAPI document: 0.1.0-alpha
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VaultumSDK\Model;

use \ArrayAccess;
use \VaultumSDK\ObjectSerializer;

/**
 * UserOperation Class Doc Comment
 *
 * @category Class
 * @package  VaultumSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserOperation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserOperation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sender' => 'string',
        'nonce' => 'string',
        'init_code' => 'string',
        'call_data' => 'string',
        'call_gas_limit' => 'string',
        'verification_gas_limit' => 'string',
        'pre_verification_gas' => 'string',
        'max_fee_per_gas' => 'string',
        'max_priority_fee_per_gas' => 'string',
        'paymaster_and_data' => 'string',
        'signature' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sender' => null,
        'nonce' => null,
        'init_code' => null,
        'call_data' => null,
        'call_gas_limit' => null,
        'verification_gas_limit' => null,
        'pre_verification_gas' => null,
        'max_fee_per_gas' => null,
        'max_priority_fee_per_gas' => null,
        'paymaster_and_data' => null,
        'signature' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sender' => false,
        'nonce' => false,
        'init_code' => false,
        'call_data' => false,
        'call_gas_limit' => false,
        'verification_gas_limit' => false,
        'pre_verification_gas' => false,
        'max_fee_per_gas' => false,
        'max_priority_fee_per_gas' => false,
        'paymaster_and_data' => false,
        'signature' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sender' => 'sender',
        'nonce' => 'nonce',
        'init_code' => 'initCode',
        'call_data' => 'callData',
        'call_gas_limit' => 'callGasLimit',
        'verification_gas_limit' => 'verificationGasLimit',
        'pre_verification_gas' => 'preVerificationGas',
        'max_fee_per_gas' => 'maxFeePerGas',
        'max_priority_fee_per_gas' => 'maxPriorityFeePerGas',
        'paymaster_and_data' => 'paymasterAndData',
        'signature' => 'signature'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sender' => 'setSender',
        'nonce' => 'setNonce',
        'init_code' => 'setInitCode',
        'call_data' => 'setCallData',
        'call_gas_limit' => 'setCallGasLimit',
        'verification_gas_limit' => 'setVerificationGasLimit',
        'pre_verification_gas' => 'setPreVerificationGas',
        'max_fee_per_gas' => 'setMaxFeePerGas',
        'max_priority_fee_per_gas' => 'setMaxPriorityFeePerGas',
        'paymaster_and_data' => 'setPaymasterAndData',
        'signature' => 'setSignature'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sender' => 'getSender',
        'nonce' => 'getNonce',
        'init_code' => 'getInitCode',
        'call_data' => 'getCallData',
        'call_gas_limit' => 'getCallGasLimit',
        'verification_gas_limit' => 'getVerificationGasLimit',
        'pre_verification_gas' => 'getPreVerificationGas',
        'max_fee_per_gas' => 'getMaxFeePerGas',
        'max_priority_fee_per_gas' => 'getMaxPriorityFeePerGas',
        'paymaster_and_data' => 'getPaymasterAndData',
        'signature' => 'getSignature'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('nonce', $data ?? [], null);
        $this->setIfExists('init_code', $data ?? [], null);
        $this->setIfExists('call_data', $data ?? [], null);
        $this->setIfExists('call_gas_limit', $data ?? [], null);
        $this->setIfExists('verification_gas_limit', $data ?? [], null);
        $this->setIfExists('pre_verification_gas', $data ?? [], null);
        $this->setIfExists('max_fee_per_gas', $data ?? [], null);
        $this->setIfExists('max_priority_fee_per_gas', $data ?? [], null);
        $this->setIfExists('paymaster_and_data', $data ?? [], null);
        $this->setIfExists('signature', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sender'] === null) {
            $invalidProperties[] = "'sender' can't be null";
        }
        if (!preg_match("/^0x[a-fA-F0-9]{40}$/", $this->container['sender'])) {
            $invalidProperties[] = "invalid value for 'sender', must be conform to the pattern /^0x[a-fA-F0-9]{40}$/.";
        }

        if ($this->container['nonce'] === null) {
            $invalidProperties[] = "'nonce' can't be null";
        }
        if (!preg_match("/^0x[a-fA-F0-9]+$/", $this->container['nonce'])) {
            $invalidProperties[] = "invalid value for 'nonce', must be conform to the pattern /^0x[a-fA-F0-9]+$/.";
        }

        if ($this->container['init_code'] === null) {
            $invalidProperties[] = "'init_code' can't be null";
        }
        if (!preg_match("/^0x[a-fA-F0-9]*$/", $this->container['init_code'])) {
            $invalidProperties[] = "invalid value for 'init_code', must be conform to the pattern /^0x[a-fA-F0-9]*$/.";
        }

        if ($this->container['call_data'] === null) {
            $invalidProperties[] = "'call_data' can't be null";
        }
        if (!preg_match("/^0x[a-fA-F0-9]*$/", $this->container['call_data'])) {
            $invalidProperties[] = "invalid value for 'call_data', must be conform to the pattern /^0x[a-fA-F0-9]*$/.";
        }

        if ($this->container['call_gas_limit'] === null) {
            $invalidProperties[] = "'call_gas_limit' can't be null";
        }
        if (!preg_match("/^0x[a-fA-F0-9]+$/", $this->container['call_gas_limit'])) {
            $invalidProperties[] = "invalid value for 'call_gas_limit', must be conform to the pattern /^0x[a-fA-F0-9]+$/.";
        }

        if ($this->container['verification_gas_limit'] === null) {
            $invalidProperties[] = "'verification_gas_limit' can't be null";
        }
        if (!preg_match("/^0x[a-fA-F0-9]+$/", $this->container['verification_gas_limit'])) {
            $invalidProperties[] = "invalid value for 'verification_gas_limit', must be conform to the pattern /^0x[a-fA-F0-9]+$/.";
        }

        if ($this->container['pre_verification_gas'] === null) {
            $invalidProperties[] = "'pre_verification_gas' can't be null";
        }
        if (!preg_match("/^0x[a-fA-F0-9]+$/", $this->container['pre_verification_gas'])) {
            $invalidProperties[] = "invalid value for 'pre_verification_gas', must be conform to the pattern /^0x[a-fA-F0-9]+$/.";
        }

        if ($this->container['max_fee_per_gas'] === null) {
            $invalidProperties[] = "'max_fee_per_gas' can't be null";
        }
        if (!preg_match("/^0x[a-fA-F0-9]+$/", $this->container['max_fee_per_gas'])) {
            $invalidProperties[] = "invalid value for 'max_fee_per_gas', must be conform to the pattern /^0x[a-fA-F0-9]+$/.";
        }

        if ($this->container['max_priority_fee_per_gas'] === null) {
            $invalidProperties[] = "'max_priority_fee_per_gas' can't be null";
        }
        if (!preg_match("/^0x[a-fA-F0-9]+$/", $this->container['max_priority_fee_per_gas'])) {
            $invalidProperties[] = "invalid value for 'max_priority_fee_per_gas', must be conform to the pattern /^0x[a-fA-F0-9]+$/.";
        }

        if ($this->container['paymaster_and_data'] === null) {
            $invalidProperties[] = "'paymaster_and_data' can't be null";
        }
        if (!preg_match("/^0x[a-fA-F0-9]*$/", $this->container['paymaster_and_data'])) {
            $invalidProperties[] = "invalid value for 'paymaster_and_data', must be conform to the pattern /^0x[a-fA-F0-9]*$/.";
        }

        if ($this->container['signature'] === null) {
            $invalidProperties[] = "'signature' can't be null";
        }
        if (!preg_match("/^0x[a-fA-F0-9]*$/", $this->container['signature'])) {
            $invalidProperties[] = "invalid value for 'signature', must be conform to the pattern /^0x[a-fA-F0-9]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sender
     *
     * @return string
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string $sender sender
     *
     * @return self
     */
    public function setSender($sender)
    {
        if (is_null($sender)) {
            throw new \InvalidArgumentException('non-nullable sender cannot be null');
        }

        if ((!preg_match("/^0x[a-fA-F0-9]{40}$/", ObjectSerializer::toString($sender)))) {
            throw new \InvalidArgumentException("invalid value for \$sender when calling UserOperation., must conform to the pattern /^0x[a-fA-F0-9]{40}$/.");
        }

        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets nonce
     *
     * @return string
     */
    public function getNonce()
    {
        return $this->container['nonce'];
    }

    /**
     * Sets nonce
     *
     * @param string $nonce nonce
     *
     * @return self
     */
    public function setNonce($nonce)
    {
        if (is_null($nonce)) {
            throw new \InvalidArgumentException('non-nullable nonce cannot be null');
        }

        if ((!preg_match("/^0x[a-fA-F0-9]+$/", ObjectSerializer::toString($nonce)))) {
            throw new \InvalidArgumentException("invalid value for \$nonce when calling UserOperation., must conform to the pattern /^0x[a-fA-F0-9]+$/.");
        }

        $this->container['nonce'] = $nonce;

        return $this;
    }

    /**
     * Gets init_code
     *
     * @return string
     */
    public function getInitCode()
    {
        return $this->container['init_code'];
    }

    /**
     * Sets init_code
     *
     * @param string $init_code init_code
     *
     * @return self
     */
    public function setInitCode($init_code)
    {
        if (is_null($init_code)) {
            throw new \InvalidArgumentException('non-nullable init_code cannot be null');
        }

        if ((!preg_match("/^0x[a-fA-F0-9]*$/", ObjectSerializer::toString($init_code)))) {
            throw new \InvalidArgumentException("invalid value for \$init_code when calling UserOperation., must conform to the pattern /^0x[a-fA-F0-9]*$/.");
        }

        $this->container['init_code'] = $init_code;

        return $this;
    }

    /**
     * Gets call_data
     *
     * @return string
     */
    public function getCallData()
    {
        return $this->container['call_data'];
    }

    /**
     * Sets call_data
     *
     * @param string $call_data call_data
     *
     * @return self
     */
    public function setCallData($call_data)
    {
        if (is_null($call_data)) {
            throw new \InvalidArgumentException('non-nullable call_data cannot be null');
        }

        if ((!preg_match("/^0x[a-fA-F0-9]*$/", ObjectSerializer::toString($call_data)))) {
            throw new \InvalidArgumentException("invalid value for \$call_data when calling UserOperation., must conform to the pattern /^0x[a-fA-F0-9]*$/.");
        }

        $this->container['call_data'] = $call_data;

        return $this;
    }

    /**
     * Gets call_gas_limit
     *
     * @return string
     */
    public function getCallGasLimit()
    {
        return $this->container['call_gas_limit'];
    }

    /**
     * Sets call_gas_limit
     *
     * @param string $call_gas_limit call_gas_limit
     *
     * @return self
     */
    public function setCallGasLimit($call_gas_limit)
    {
        if (is_null($call_gas_limit)) {
            throw new \InvalidArgumentException('non-nullable call_gas_limit cannot be null');
        }

        if ((!preg_match("/^0x[a-fA-F0-9]+$/", ObjectSerializer::toString($call_gas_limit)))) {
            throw new \InvalidArgumentException("invalid value for \$call_gas_limit when calling UserOperation., must conform to the pattern /^0x[a-fA-F0-9]+$/.");
        }

        $this->container['call_gas_limit'] = $call_gas_limit;

        return $this;
    }

    /**
     * Gets verification_gas_limit
     *
     * @return string
     */
    public function getVerificationGasLimit()
    {
        return $this->container['verification_gas_limit'];
    }

    /**
     * Sets verification_gas_limit
     *
     * @param string $verification_gas_limit verification_gas_limit
     *
     * @return self
     */
    public function setVerificationGasLimit($verification_gas_limit)
    {
        if (is_null($verification_gas_limit)) {
            throw new \InvalidArgumentException('non-nullable verification_gas_limit cannot be null');
        }

        if ((!preg_match("/^0x[a-fA-F0-9]+$/", ObjectSerializer::toString($verification_gas_limit)))) {
            throw new \InvalidArgumentException("invalid value for \$verification_gas_limit when calling UserOperation., must conform to the pattern /^0x[a-fA-F0-9]+$/.");
        }

        $this->container['verification_gas_limit'] = $verification_gas_limit;

        return $this;
    }

    /**
     * Gets pre_verification_gas
     *
     * @return string
     */
    public function getPreVerificationGas()
    {
        return $this->container['pre_verification_gas'];
    }

    /**
     * Sets pre_verification_gas
     *
     * @param string $pre_verification_gas pre_verification_gas
     *
     * @return self
     */
    public function setPreVerificationGas($pre_verification_gas)
    {
        if (is_null($pre_verification_gas)) {
            throw new \InvalidArgumentException('non-nullable pre_verification_gas cannot be null');
        }

        if ((!preg_match("/^0x[a-fA-F0-9]+$/", ObjectSerializer::toString($pre_verification_gas)))) {
            throw new \InvalidArgumentException("invalid value for \$pre_verification_gas when calling UserOperation., must conform to the pattern /^0x[a-fA-F0-9]+$/.");
        }

        $this->container['pre_verification_gas'] = $pre_verification_gas;

        return $this;
    }

    /**
     * Gets max_fee_per_gas
     *
     * @return string
     */
    public function getMaxFeePerGas()
    {
        return $this->container['max_fee_per_gas'];
    }

    /**
     * Sets max_fee_per_gas
     *
     * @param string $max_fee_per_gas max_fee_per_gas
     *
     * @return self
     */
    public function setMaxFeePerGas($max_fee_per_gas)
    {
        if (is_null($max_fee_per_gas)) {
            throw new \InvalidArgumentException('non-nullable max_fee_per_gas cannot be null');
        }

        if ((!preg_match("/^0x[a-fA-F0-9]+$/", ObjectSerializer::toString($max_fee_per_gas)))) {
            throw new \InvalidArgumentException("invalid value for \$max_fee_per_gas when calling UserOperation., must conform to the pattern /^0x[a-fA-F0-9]+$/.");
        }

        $this->container['max_fee_per_gas'] = $max_fee_per_gas;

        return $this;
    }

    /**
     * Gets max_priority_fee_per_gas
     *
     * @return string
     */
    public function getMaxPriorityFeePerGas()
    {
        return $this->container['max_priority_fee_per_gas'];
    }

    /**
     * Sets max_priority_fee_per_gas
     *
     * @param string $max_priority_fee_per_gas max_priority_fee_per_gas
     *
     * @return self
     */
    public function setMaxPriorityFeePerGas($max_priority_fee_per_gas)
    {
        if (is_null($max_priority_fee_per_gas)) {
            throw new \InvalidArgumentException('non-nullable max_priority_fee_per_gas cannot be null');
        }

        if ((!preg_match("/^0x[a-fA-F0-9]+$/", ObjectSerializer::toString($max_priority_fee_per_gas)))) {
            throw new \InvalidArgumentException("invalid value for \$max_priority_fee_per_gas when calling UserOperation., must conform to the pattern /^0x[a-fA-F0-9]+$/.");
        }

        $this->container['max_priority_fee_per_gas'] = $max_priority_fee_per_gas;

        return $this;
    }

    /**
     * Gets paymaster_and_data
     *
     * @return string
     */
    public function getPaymasterAndData()
    {
        return $this->container['paymaster_and_data'];
    }

    /**
     * Sets paymaster_and_data
     *
     * @param string $paymaster_and_data paymaster_and_data
     *
     * @return self
     */
    public function setPaymasterAndData($paymaster_and_data)
    {
        if (is_null($paymaster_and_data)) {
            throw new \InvalidArgumentException('non-nullable paymaster_and_data cannot be null');
        }

        if ((!preg_match("/^0x[a-fA-F0-9]*$/", ObjectSerializer::toString($paymaster_and_data)))) {
            throw new \InvalidArgumentException("invalid value for \$paymaster_and_data when calling UserOperation., must conform to the pattern /^0x[a-fA-F0-9]*$/.");
        }

        $this->container['paymaster_and_data'] = $paymaster_and_data;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string $signature signature
     *
     * @return self
     */
    public function setSignature($signature)
    {
        if (is_null($signature)) {
            throw new \InvalidArgumentException('non-nullable signature cannot be null');
        }

        if ((!preg_match("/^0x[a-fA-F0-9]*$/", ObjectSerializer::toString($signature)))) {
            throw new \InvalidArgumentException("invalid value for \$signature when calling UserOperation., must conform to the pattern /^0x[a-fA-F0-9]*$/.");
        }

        $this->container['signature'] = $signature;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


